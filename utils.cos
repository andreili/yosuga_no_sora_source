@IF	@IsDefined("__BUILD_ONE__") == 0
Include	"yosuga.ch"
@ENDIF

Function InitRandom(Integer seed)
	Debug("InitRandom()")
	nRandomSeed := seed
EndFunc

Function SaveObject(String path, Reference object)
	Debug("SaveObject()")
	File file
	If (file.Open(path, 5))
		Return 1
	EndIf
	Return file.SaveObject(object)
EndFunc

Function LoadObject(String path, Reference object)
	Debug("LoadObject()")
	File file
	If (file.Open(path))
		Return 1
	EndIf
	Return (file.LoadObject(object))
EndFunc

Function AddjustString(String src, Integer num)
	Debug("AddjustString()")
	Integer length := src.GetLength()
	If (length <= num)
		Return src
	EndIf
	String temp
	Integer i := 0
	While (i + num < length)
		temp += src.Middle(i, num) + "\n"
		i += num
	EndWhile
	If (i < length)
		temp += src.Middle(i, num)
	EndIf
	Return temp
EndFunc

Function AskGameExit()
	Debug("AskGameExit()")
	If (Confirm("ゲームを終了します", true))
		screen.Lock()
		Throw()
	EndIf
EndFunc

Function BlackOut(Integer wait, Integer fHide)
	Debug("BlackOut()")
	If (fHide != false)
		Hide()
	EndIf
	If (wait == 0)
		wait := 1000
	EndIf
	SetCg("black")
	Transition("", wait)
	Update()
EndFunc

Function CheckTrueName(Reference aliasName, Reference showName, Reference trueName)
	Debug("CheckTrueName()")
	String strTemp
	strTemp := aliasName
	Integer index := strTemp.Find("《")
	If (index != true)
        showName := strTemp.Left(index)
        Integer iRight := strTemp.Find("》")
        trueName := strTemp.Middle(index + 1, iRight - index - 1)
    Else
        trueName := strTemp
        showName :=strTemp
    EndIf
	If (strTemp == "")
	ElseIf (showName == "語り")
        showName := ""
	ElseIf (showName == "心の声")
        showName := ""
	ElseIf(showName == "モノローグ")
        showName := ""
    EndIf
EndFunc

Function ClearWscmd(Reference wscmd)
	;Debug("ClearWscmd()")
	wscmd.strID := ""
	wscmd.strFullID := ""
	wscmd.nNotification := 0
	wscmd.nParameter := 0
EndFunc

Function CreateDateString(Reference time)
	Debug("CreateDateString()")
	String ret
	String temp
	ret := ""
	temp := time.nYear
	ret += temp + "/"
	If (time.nMonth < 10)
		ret += "0"
	EndIf
	temp := time.nMonth
	ret += temp + "/"
	If (time.nDay < 10)
		ret += "0"
	EndIf
	ret += ConvertToString(time.nDay) + " "
	If (time.nHour < 10)
		ret += "0"
	EndIf
	temp := time.nHour
	ret += temp + ":"
	If (time.nMinute < 10)
		ret += "0"
	EndIf
	temp := time.nMinute
	ret += temp + ":"
	If (time.nSecond < 10)
		ret += "0"
	EndIf
	temp := time.nSecond
	ret += temp
	Return ret
EndFunc

Function CreateMessageEscapeSequence(Integer size, Integer height, Integer fBold, Integer fItalic, String face)
	Debug("CreateMessageEscapeSequence()")
	String sequence
	If (size != 0)
		sequence += "\\s;" + ConvertToString(size) + ":"
	Else
		sequence += "\\s:"
	EndIf
	If (height != 0)
		sequence += "\\h;" + ConvertToString(height) + ":"
	Else
		sequence += "\\h:"
	EndIf
	If (fBold != 0)
		sequence += "\\b"
	Else
		sequence += "\\nb"
	EndIf
	If (fItalic != 0)
		sequence += "\\i"
	Else
		sequence += "\\ni"
	EndIf
	If (face == "")
		sequence += "\\f:"
	Else
		sequence += "\\f;" + face + ":"
	EndIf
	Return sequence
EndFunc

Function CreateRGBImage(Reference spr, Integer col, Integer width, Integer height)
	Debug("CreateRGBImage()")
	spr.Release()
	spr.CreateSprite(1, width, height)
	spr.SetBackColor(Reference, 0)
	spr.FillRect(IRect(0, 0, width, height), col)
EndFunc

Function Down(Integer id, Integer mv, Integer time, Integer accel)
	Debug("Down()")
	If (IsLoad() == true)
		Return
	EndIf
	adv.bustupDown(id, mv, time, accel)
EndFunc

Function DumpContext(String path)
	Debug("DumpContext()")
	File file
	If (file.Open(path, 5))
		Return 1
	EndIf
	Return file.DumpContext()
EndFunc

Function Flush(String color, Integer time, String cgFile)
	Debug("Flush()")
	If (IsLoad() == true)
		Return 0
	Endif
	Integer fFlush := adv.isKeyUpdateFlush()
	If (fFlush == true)
		Return 0
	EndIf
	adv.effectFlush(color, time, cgFile)
EndFunc

Function FlushCommandQueue()
	Debug("FlushCommandQueue()")
	screen.FlushCommandQueue(true)
EndFunc

Function Font(Integer size, String face)
	Debug("Font()")
	If (IsLoad() == true)
		Return
	EndIf
	adv.font(size, 0, 0, face)
EndFunc

Function GetCommand(Reference wscmd, Integer timeout)
	;Debug("GetCommand()")
	adv.updateProc()
	BgmCheckCallback()
	EnvSeCheckCallback()
	If (0 == true)
		VoicePlayIndicatorProc()
	EndIf
	ClearWscmd(wscmd)
	Integer res
	res := screen.GetCommand(wscmd, timeout, true)
	If (wscmd.strID == "ID_APP_EXIT")
		AskGameExit()
		screen.FlushCommandQueue(true)
	ElseIf (0 == true)
		DebugProc(wscmd)
	EndIf
	Return res
EndFunc

Function Hide(Integer fWait)
	Debug("Hide()")
	If (IsLoad() == true)
		Return
	EndIf
	adv.hideMessage(0, fWait)
EndFunc

Function Hitret(Integer id, Integer fVoiceWait)
	Debug("Hitret()")
	Integer ret := adv.hitret(id, fVoiceWait)
	Return ret
EndFunc

Function TestHitret(String str)
	Debug("TestHitret()")
	If (str != "")
		Debug(str)
	EndIf
	input.FlushJoyButtonPushed()
	WndSpriteCmd wscmd
	While (true)
		GetCommand(wscmd, 33)
		If ((input.GetJoyButtonPushed(4) > 0) | (input.GetJoyButtonPushed(5) > 0))
			break
		EndIf
	EndWhile
	input.FlushJoyButtonPushed()
EndFunc

Function HitWait(Integer time)
	Debug("HitWait()")
	FlushJoyButton()
	Integer startTime := GetCurrentTime()
	While ((GetCurrentTime() - startTime) < time)
		If ((input.GetJoyButtonPushed(4) > 0) | (input.GetJoyButtonPushed(5) > 0))
			Return true
		EndIf
	EndWhile
	Return false
EndFunc

Function IsConfirm()
	Debug("IsConfirm()")
	Return fConfirm
EndFunc

Function MakeRandom(Integer nLimit)
	Debug("MakeRandom()")
	If (nLimit == 0)
		Return 0
	EndIf
	nRandomSeed := nRandomSeed * 9 + 1779772371
	Return ConvertToInteger((nRandomSeed & 2147483647)).ShiftRight(8) % nLimit
EndFunc

Function Mess(String str)
	Debug("Mess()")
	adv.mess(str)
EndFunc

Function WaitUntilSpriteActive(Reference refSprite, Integer fEnableSkip)
	Debug("WaitUntilSpriteActive()")
	Integer iCanceled := 0
	input.FlushJoyButtonPushed()
	While (refSprite.IsActivation())
		If ((fEnableSkip) & (input.GetJoyButtonPushed(4) > 0))
			iCanceled := true
			Break
		EndIf
		Sleep(33)
	EndWhile
	refSprite.FlushActivation()
	UpdateWindow()
	Return iCanceled
EndFunc

Function Confirm(String str, Integer fYesNo, Reference refSpr, Integer time)
	Debug("Confirm()")
	screen.SetFocus("")
	If (IsConfirm() == true)
		Return false
	EndIf
	Integer ret := 0
	fConfirm := true
	Sprite sprBlack
	Sprite sprBase
	Sprite sprFrame
	MessageSprite msprMessage
	sprBlack.CreateSprite(1, ScreenSize.w, ScreenSize.h)
	sprBlack.FillRect(IRect(0, 0, ScreenSize.w, ScreenSize.h), RGB(0, 0, 0))
	sprBlack.SetTransparency(256)
	sprBlack.SetVisible(true)
	frameSkin.CreateFormPage(sprFrame, "ID_PAGE_CONFIRM")
	ImageInfo info
	info := sprFrame.GetInfo()
	If (fYesNo == true)
	Else
		sprFrame.SetTransparency(256, "ID_YES")
		sprFrame.SetTransparency(256, "ID_NO")
	EndIf
	sprFrame.SetVisible(true)
	msprMessage.CreateMessage(ScreenSize.w, 24)
	msprMessage.AttachMessageStyle(frameSkin, "ID_FONT_CONFIRM")
	msprMessage.SetDefaultMsgSpeed(0, 0, 0)
	If (fYesNo == true)
		msprMessage.MovePosition(0, 30)
	Else
		msprMessage.MovePosition(0, (info.nImageHeight - 24) / 2)
	EndIf
	msprMessage.OutputMessage(str)
	msprMessage.SetVisible(true)
	sprBase.CreateSprite(67108865, info.nImageWidth, info.nImageHeight)
	sprBase.SetTransparency(256)
	sprBase.AddSprite(10, msprMessage)
	sprBase.AddSprite(20, sprFrame)
	sprBase.MovePosition(0, ScreenSize.h / 2)
	SpriteParam param
	sprBase.GetParameter(param)
	param.ptRevCenter.y := info.nImageHeight / 2
	sprBase.SetParameter(param)
	sprBase.SetVisible(true)
	If (refSpr.GetType() == "Sprite")
		ImageInfo sprInfo := refSpr.GetInfo()
		SpriteParam param
		refSpr.GetParameter(param)
		param.ptRevCenter.x := sprInfo.nImageWidth / 2
		param.ptRevCenter.y := sprInfo.nImageHeight / 2
		If (80 < sprInfo.nImageHeight)
			param.rHorzUnit := 80.0 / sprInfo.nImageHeight
			param.rVertUnit := 80.0 / sprInfo.nImageHeight
		EndIf
		refSpr.SetParameter(param)
		refSpr.MovePosition(128, info.nImageHeight / 2)
		refSpr.SetVisible(true)
		sprBase.AddSprite(15, refSpr)
	EndIf
	screen.AddSprite(50200, sprBase)
	screen.AddSprite(50200, sprBlack)
	screen.Lock()
	If (cnfObj.screenEffect == 0)
		Bezier2D bzMag
		bzMag.SetLinear(1.0, 0.0, 1.0, 1.0)
		bzMag.SetAcceleration(3, 0)
		sprBase.SetBezierCurve(Reference, Reference, bzMag)
		sprBase.SetBlendingEnvelope(0)
		sprBase.BeginActivation(300)
		sprBlack.SetBlendingEnvelope(128)
		sprBlack.BeginActivation(300)
	Else
		sprBase.SetTransparency(0)
		sprBlack.SetTransparency(128)
	EndIf
	screen.Unlock()
	input.FlushJoyButtonPushed()
	screen.FlushCommandQueue(true)
	WndSpriteCmd wscmd
	If (fYesNo == true)
		While (true)
			GetCommand(wscmd, 33)
			If (IsUNK1)
			ElseIf (wscmd.strID == "ID_YES")
				sprFrame.Enable(false, "ID_YES")
				ret := true
				Break
			ElseIf ((wscmd.strID == "ID_NO") | (input.GetJoyButtonPushed(5) > 0))
				sprFrame.Enable(false, "ID_NO")
				ret := false
				Break
			EndIf
		EndWhile
	Else
		If (time == 0)
			time := 1000
		EndIf
		Integer startTime := GetCurrentTime()
		While (true)
			GetCommand(wscmd, 33)
			If ((startTime + time) < GetCurrentTime())
				Break
			ElseIf ((input.GetJoyButtonPushed(4) > 0) | (input.GetJoyButtonPushed(5) > 0))
				Break
			EndIf
		EndWhile
	EndIf
	screen.Lock()
	If (cnfObj.screenEffect == 0)
		sprBase.SetBlendingEnvelope(256)
		sprBase.BeginActivation(300)
		sprBlack.SetBlendingEnvelope(256)
		sprBlack.BeginActivation(300)
		screen.Unlock()
		WaitUntilSpriteActive(sprBlack, false)
	Else
		sprBase.SetVisible(false)
		sprBlack.SetVisible(false)
		screen.nlock()
	EndIf
	sprBase.DetachSprite(msprMessage)
	sprBase.DetachSprite(sprFrame)
	sprBase.DetachSprite(sprBase)
	If (refSpr.GetType() == "Sprite")
		sprBase.DetachSprite(refSpr)
	EndIf
	screen.DetachSprite(sprBlack)
	fConfirm := false
	input.FlushJoyButtonPushed()
	screen.FlushCommandQueue(true)
	Return ret
EndFunc

Function OutputLogText(String path, String text)
	Debug("OutputLogText()")
	File file
	If (file.Open(path, 4))
		If (file.Open(path, 5))
			Return 1
		EndIf
	EndIf
	file.Seek(0, 2)
	file.WriteText(text)
	file.Close()
EndFunc

Function RGB(Integer r, Integer g, Integer b)
	Debug("RGB()")
	Return r.ShiftLeft(16) | g.ShiftLeft(8) | b
EndFunc

Function RGBA(Integer r, Integer g, Integer b, Integer a)
	Debug("RGBA()")
	Return a.ShiftLeft(24) | r.ShiftLeft(16) | g.ShiftLeft(8) | b
EndFunc

Function CreateNumString(Integer iNum, Integer iFigure, Integer flgZero, Integer flgZenkaku)
	Debug("CreateNumString()")
	String str
	String temp
	Integer flgMinus := false
	If (iNum < 0)
		iNum *= -1
		flgMinus := true
	EndIf
	Integer num := 0
	Integer figure := 0
	Integer numTemp := iNum
	While (numTemp != 0)
		Integer amari := numTemp % 10
		If (amari == 0)
			If (flgZenkaku)
				str := "０" + str
			Else
				str := "0" + str
			EndIf
		ElseIf (amari == 1)
			If (flgZenkaku)
				str := "１" + str
			Else
				str := "1" + str
			EndIf
		ElseIf (amari == 2)
			If (flgZenkaku)
				str := "２" + str
			Else
				str := "2" + str
			EndIf
		ElseIf (amari == 3)
			If (flgZenkaku)
				str := "３" + str
			Else
				str := "3" + str
			EndIf
		ElseIf (amari == 4)
			If (flgZenkaku)
				str := "４" + str
			Else
				str := "4" + str
			EndIf
		ElseIf (amari == 5)
			If (flgZenkaku)
				str := "５" + str
			Else
				str := "5" + str
			EndIf
		ElseIf (amari == 6)
			If (flgZenkaku)
				str := "６" + str
			Else
				str := "6" + str
			EndIf
		ElseIf (amari == 7)
			If (flgZenkaku)
				str := "７" + str
			Else
				str := "7" + str
			EndIf
		ElseIf (amari == 8)
			If (flgZenkaku)
				str := "８" + str
			Else
				str := "8" + str
			EndIf
		ElseIf (amari == 9)
			If (flgZenkaku)
				str := "９" + str
			Else
				str := "9" + str
			EndIf
		EndIf
		numTemp /= 10
		figure += 1
	EndWhile
	If ((iFigure == 0) | (iFigure <= figure))
	Else
		Integer i := iFigure - figure
		While (i != 0)
			If (flgZero)
				If (flgZenkaku)
					str := "０" + str
				Else
					str := "0" + str
				EndIf
			ElseIf (flgZenkaku)
				str := "  " + str
			Else
				str := " " + str
			EndIf
			i -= 1
		EndWhile
	EndIf
	If (flgMinus)
		If (flgZenkaku)
			str := "−" + str
		Else
			str := "-" + str
		EndIf
	EndIf
	Return str
EndFunc

Function MessageInfo::clear()
	this.name := ""
	this.message := ""
	this.voice := ""
EndFunc

Function Bookmark::init()
	this.fSave := 0
	this.comment := ""
	this.time.nYear := 0
	this.time.nMonth := 0
	this.time.nDay := 0
	this.time.nWeek := 0
	this.time.nHour := 0
	this.time.nMinute := 0
	this.time.nSecond := 0
EndFunc

Function CgInfo::clear()
	this.timeZone := 0
	this.filename := ""
	this.pt := IPoint(0, 0)
	this.effectParam.strType := "Nothing"
EndFunc

Function MoveParam::set(Reference pt, Integer time, Integer accel, Integer fFade)
	this.pt := pt
	this.time := time
	this.accel := accel
	this.fFade := fFade
EndFunc

Function StringToNum(Reference strNum)
	Debug("StringToNum()")
	Integer num := 0
	Integer i := 0
	While (i < strNum.GetLength())
		num *= 10
		num += strNum.Char(i) - 48
		i += 1
	EndWhile
	Return num
EndFunc

Function TransitionInfo::clear()
	this.type := ""
	this.time := 0
EndFunc

Function WhiteOut(Integer wait, Integer fHide)
	Debug("WhiteOut()")
	If (fHide != false)
		Hide()
	Endif
	If (wait == false)
		wait := 1000
	EndIf
	SetCg("white")
	Transition("", wait)
	Update()
EndFunc

Function ZoomParam::clear()
	set(0, 0, 800, 600, 0, 0)
EndFunc

Function ZoomParam::horzUnit()
	Return ConvertToReal(800) / this.size.w + 0.0
EndFunc

Function ZoomParam::vertUnit()
	Return ConvertToReal(600) / this.size.h + 0.0
EndFunc

Function ZoomParam::isZoom()
	If ((this.size.w == 800) & (this.size.h == 600))
		Return false
	EndIf
	Return true
EndFunc

Function ZoomParam::set(Integer cx, Integer cy, Integer w, Integer h, Integer time, Integer accel)
	this.pt := IPoint(cx, cy)
	this.size := ISize(w, h)
	this.time := time
	this.accel := accel
EndFunc

Function CheckSetupCg(String str, Reference cgInfo)
	Debug("CheckSetupCg()")
	Integer timeZone := 1
	str.MakeUpper()
	ClearEffectParameter(cgInfo.effectParam)
	String strType := "Nothing"
	If ("" == str)
	ElseIf ("BLACK" == str)
	ElseIf ("WHITE" == str)
	ElseIf (CheckCg(str, "EA01A", 100, 101))
	ElseIf (CheckCg(str, "EA01B", 100, 102))
	ElseIf (CheckCg(str, "EA01C", 100, 103))
	ElseIf (CheckCg(str, "EA01D", 100, 104))
	ElseIf (CheckCg(str, "EA01E", 100, 105))
	ElseIf (CheckCg(str, "EA01F", 100, 106))
	ElseIf (CheckCg(str, "EA01G", 100, 107))
	ElseIf (CheckCg(str, "EA01H", 100, 108))
	ElseIf (CheckCg(str, "EA02", 110, 111))
	ElseIf (CheckCg(str, "EA03A", 120, 121))
	ElseIf (CheckCg(str, "EA03B", 120, 122))
	ElseIf (CheckCg(str, "EA04A", 130, 131))
	ElseIf (CheckCg(str, "EA04B", 130, 132))
	ElseIf (CheckCg(str, "EA04C", 130, 133))
	ElseIf (CheckCg(str, "EA05", 140, 141))
	ElseIf (CheckCg(str, "EA06A", 150, 151))
	ElseIf (CheckCg(str, "EA06B", 150, 152))
	ElseIf (CheckCg(str, "EA06C", 150, 153))
	ElseIf (CheckCg(str, "EA06D", 150, 154))
	ElseIf (CheckCg(str, "EA06E", 150, 155))
	ElseIf (CheckCg(str, "EA07", 160, 161))
	ElseIf (CheckCg(str, "EA08A", 170, 171))
	ElseIf (CheckCg(str, "EA08B", 170, 172))
	ElseIf (CheckCg(str, "EA08C", 170, 173))
	ElseIf (CheckCg(str, "EA09A", 180, 181))
	ElseIf (CheckCg(str, "EA09B", 180, 182))
	ElseIf (CheckCg(str, "EA09C", 180, 183))
	ElseIf (CheckCg(str, "EA09D", 180, 184))
	ElseIf (CheckCg(str, "EA10A", 190, 191))
	ElseIf (CheckCg(str, "EA10B", 190, 192))
	ElseIf (CheckCg(str, "EA10C", 190, 193))
	ElseIf (CheckCg(str, "EA10D", 190, 194))
	ElseIf (CheckCg(str, "EA11A", 200, 201))
	ElseIf (CheckCg(str, "EA11B", 200, 202))
	ElseIf (CheckCg(str, "EA11C", 200, 203))
	ElseIf (CheckCg(str, "EA11D", 200, 204))
	ElseIf (CheckCg(str, "EA12A", 210, 211))
	ElseIf (CheckCg(str, "EA12B", 210, 212))
	ElseIf (CheckCg(str, "EA12C", 210, 213))
	ElseIf (CheckCg(str, "EA13A", 220, 221))
	ElseIf (CheckCg(str, "EA13B", 220, 222))
	ElseIf (CheckCg(str, "EA13C", 220, 223))
	ElseIf (CheckCg(str, "EA14", 230, 231))
	ElseIf (CheckCg(str, "EA15", 240, 241))
	ElseIf (CheckCg(str, "EA16A", 250, 251))
	ElseIf (CheckCg(str, "EA16B", 250, 252))
	ElseIf (CheckCg(str, "EA17A", 260, 261))
	ElseIf (CheckCg(str, "EA17B", 260, 262))
	ElseIf (CheckCg(str, "EA17C", 260, 263))
	ElseIf (CheckCg(str, "EA18A", 270, 271))
	ElseIf (CheckCg(str, "EA18B", 270, 272))
	ElseIf (CheckCg(str, "EB01A", 280, 281))
	ElseIf (CheckCg(str, "EB01B", 280, 282))
	ElseIf (CheckCg(str, "EB02A", 290, 291))
	ElseIf (CheckCg(str, "EB02B", 290, 292))
	ElseIf (CheckCg(str, "EB03", 300, 301))
	ElseIf (CheckCg(str, "EB04A", 310, 311))
	ElseIf (CheckCg(str, "EB04B", 310, 312))
	ElseIf (CheckCg(str, "EB04A_", 310, 313))
	ElseIf (CheckCg(str, "EB05", 320, 321))
	ElseIf (CheckCg(str, "EB06A", 330, 331))
	ElseIf (CheckCg(str, "EB06B", 330, 332))
	ElseIf (CheckCg(str, "EB07A", 340, 341))
	ElseIf (CheckCg(str, "EB07B", 340, 342))
	ElseIf (CheckCg(str, "EB08A", 350, 351))
	ElseIf (CheckCg(str, "EB08B", 350, 352))
	ElseIf (CheckCg(str, "EB08C", 350, 353))
	ElseIf (CheckCg(str, "EB08A_", 350, 354))
	ElseIf (CheckCg(str, "EB08B_", 350, 355))
	ElseIf (CheckCg(str, "EB09", 360, 361))
	ElseIf (CheckCg(str, "EB10A", 370, 371))
	ElseIf (CheckCg(str, "EB10B", 370, 372))
	ElseIf (CheckCg(str, "EB11A", 380, 381))
	ElseIf (CheckCg(str, "EB11B", 380, 382))
	ElseIf (CheckCg(str, "EB12A", 390, 391))
	ElseIf (CheckCg(str, "EB12B", 390, 392))
	ElseIf (CheckCg(str, "EB12C", 390, 393))
	ElseIf (CheckCg(str, "EB13A", 400, 401))
	ElseIf (CheckCg(str, "EB13B", 400, 402))
	ElseIf (CheckCg(str, "EB14", 410, 411))
	ElseIf (CheckCg(str, "EB15", 420, 421))
	ElseIf (CheckCg(str, "EB16A", 430, 431))
	ElseIf (CheckCg(str, "EB16B", 430, 432))
	ElseIf (CheckCg(str, "EB16C", 430, 433))
	ElseIf (CheckCg(str, "EB17A", 440, 441))
	ElseIf (CheckCg(str, "EB17B", 440, 442))
	ElseIf (CheckCg(str, "EB17C", 440, 443))
	ElseIf (CheckCg(str, "EB18", 450, 451))
	ElseIf (CheckCg(str, "EC01A", 460, 461))
	ElseIf (CheckCg(str, "EC01B", 460, 462))
	ElseIf (CheckCg(str, "EC02A", 470, 471))
	ElseIf (CheckCg(str, "EC02B", 470, 472))
	ElseIf (CheckCg(str, "EC02C", 470, 473))
	ElseIf (CheckCg(str, "EC03A", 480, 481))
	ElseIf (CheckCg(str, "EC03B", 480, 482))
	ElseIf (CheckCg(str, "EC03C", 480, 483))
	ElseIf (CheckCg(str, "EC03D", 480, 484))
	ElseIf (CheckCg(str, "EC04A", 490, 491))
	ElseIf (CheckCg(str, "EC04B", 490, 492))
	ElseIf (CheckCg(str, "EC05A", 500, 501))
	ElseIf (CheckCg(str, "EC05B", 500, 502))
	ElseIf (CheckCg(str, "EC06A", 510, 511))
	ElseIf (CheckCg(str, "EC06B", 510, 512))
	ElseIf (CheckCg(str, "EC07A", 520, 521))
	ElseIf (CheckCg(str, "EC07B", 520, 522))
	ElseIf (CheckCg(str, "EC07C", 520, 523))
	ElseIf (CheckCg(str, "EC08", 530, 531))
	ElseIf (CheckCg(str, "EC09", 540, 541))
	ElseIf (CheckCg(str, "EC10A", 550, 551))
	ElseIf (CheckCg(str, "EC10B", 550, 552))
	ElseIf (CheckCg(str, "EC10C", 550, 553))
	ElseIf (CheckCg(str, "EC10D", 550, 554))
	ElseIf (CheckCg(str, "EC10E", 550, 555))
	ElseIf (CheckCg(str, "EC10F", 550, 556))
	ElseIf (CheckCg(str, "EC11A", 560, 561))
	ElseIf (CheckCg(str, "EC11B", 560, 562))
	ElseIf (CheckCg(str, "EC11C", 560, 563))
	ElseIf (CheckCg(str, "EC12A", 570, 571))
	ElseIf (CheckCg(str, "EC12B", 570, 572))
	ElseIf (CheckCg(str, "EC12C", 570, 573))
	ElseIf (CheckCg(str, "EC13A", 580, 581))
	ElseIf (CheckCg(str, "EC13B", 580, 582))
	ElseIf (CheckCg(str, "EC13C", 580, 583))
	ElseIf (CheckCg(str, "EC13D", 580, 584))
	ElseIf (CheckCg(str, "EC13E", 580, 584))
	ElseIf (CheckCg(str, "EC14", 590, 591))
	ElseIf (CheckCg(str, "EC15", 600, 601))
	ElseIf (CheckCg(str, "EC16A", 610, 611))
	ElseIf (CheckCg(str, "EC16B", 610, 612))
	ElseIf (CheckCg(str, "EC16C", 610, 613))
	ElseIf (CheckCg(str, "EC16D", 610, 614))
	ElseIf (CheckCg(str, "EC17A", 620, 621))
	ElseIf (CheckCg(str, "EC17B", 620, 622))
	ElseIf (CheckCg(str, "EC17C", 620, 623))
	ElseIf (CheckCg(str, "EC18", 630, 631))
	ElseIf (CheckCg(str, "ED01A", 640, 641))
	ElseIf (CheckCg(str, "ED01B", 640, 642))
	ElseIf (CheckCg(str, "ED01C", 640, 643))
	ElseIf (CheckCg(str, "ED02A", 650, 651))
	ElseIf (CheckCg(str, "ED02B", 650, 652))
	ElseIf (CheckCg(str, "ED03A", 660, 661))
	ElseIf (CheckCg(str, "ED03B", 660, 662))
	ElseIf (CheckCg(str, "ED03C", 660, 663))
	ElseIf (CheckCg(str, "ED04", 670, 671))
	ElseIf (CheckCg(str, "ED05", 680, 681))
	ElseIf (CheckCg(str, "ED06A", 690, 691))
	ElseIf (CheckCg(str, "ED06B", 690, 692))
	ElseIf (CheckCg(str, "ED06C", 690, 693))
	ElseIf (CheckCg(str, "ED07A", 700, 701))
	ElseIf (CheckCg(str, "ED07B", 700, 702))
	ElseIf (CheckCg(str, "ED08", 710, 711))
	ElseIf (CheckCg(str, "ED09", 720, 721))
	ElseIf (CheckCg(str, "ED10A", 730, 731))
	ElseIf (CheckCg(str, "ED10B", 730, 732))
	ElseIf (CheckCg(str, "ED10C", 730, 733))
	ElseIf (CheckCg(str, "ED11A", 740, 741))
	ElseIf (CheckCg(str, "ED11B", 740, 742))
	ElseIf (CheckCg(str, "ED11C", 740, 743))
	ElseIf (CheckCg(str, "ED11D", 740, 744))
	ElseIf (CheckCg(str, "ED12A", 750, 751))
	ElseIf (CheckCg(str, "ED12B", 750, 752))
	ElseIf (CheckCg(str, "ED12C", 750, 753))
	ElseIf (CheckCg(str, "ED13A", 760, 761))
	ElseIf (CheckCg(str, "ED13B", 760, 762))
	ElseIf (CheckCg(str, "ED14", 770, 771))
	ElseIf (CheckCg(str, "ED15", 780, 781))
	ElseIf (CheckCg(str, "ED16A", 790, 791))
	ElseIf (CheckCg(str, "ED16B", 790, 792))
	ElseIf (CheckCg(str, "ED16C", 790, 793))
	ElseIf (CheckCg(str, "ED17A", 800, 801))
	ElseIf (CheckCg(str, "ED17B", 800, 802))
	ElseIf (CheckCg(str, "ED17C", 800, 803))
	ElseIf (CheckCg(str, "ED18A", 810, 811))
	ElseIf (CheckCg(str, "ED18B", 810, 812))
	ElseIf (CheckCg(str, "ED18C", 810, 813))
	ElseIf (CheckCg(str, "EE01A", 820, 821))
	ElseIf (CheckCg(str, "EE01B", 820, 822))
	ElseIf (CheckCg(str, "EE01C", 820, 823))
	ElseIf (CheckCg(str, "EE01D", 820, 824))
	ElseIf (CheckCg(str, "EE02A", 830, 831))
	ElseIf (CheckCg(str, "EE02B", 830, 832))
	ElseIf (CheckCg(str, "EE02C", 830, 833))
	ElseIf (CheckCg(str, "EE02D", 830, 834))
	ElseIf (CheckCg(str, "EE03A", 840, 841))
	ElseIf (CheckCg(str, "EE03B", 840, 842))
	ElseIf (CheckCg(str, "EE04A", 850, 851))
	ElseIf (CheckCg(str, "EE04B", 850, 852))
	ElseIf (CheckCg(str, "EE04C", 850, 853))
	ElseIf (CheckCg(str, "EE05A", 860, 861))
	ElseIf (CheckCg(str, "EE05B", 860, 862))
	ElseIf (CheckCg(str, "EE06A", 870, 871))
	ElseIf (CheckCg(str, "EE06B", 870, 872))
	ElseIf (CheckCg(str, "EE07A", 880, 881))
	ElseIf (CheckCg(str, "EE07B", 880, 882))
	ElseIf (CheckCg(str, "EE08A", 890, 891))
	ElseIf (CheckCg(str, "EE08B", 890, 892))
	ElseIf (CheckCg(str, "EE09", 900, 901))
	ElseIf (CheckCg(str, "EE10A", 910, 911))
	ElseIf (CheckCg(str, "EE10B", 910, 912))
	ElseIf (CheckCg(str, "EE10C", 910, 913))
	ElseIf (CheckCg(str, "EE10D", 910, 914))
	ElseIf (CheckCg(str, "EE11A", 920, 921))
	ElseIf (CheckCg(str, "EE11B", 920, 922))
	ElseIf (CheckCg(str, "EE11C", 920, 923))
	ElseIf (CheckCg(str, "EE12A", 930, 931))
	ElseIf (CheckCg(str, "EE12B", 930, 932))
	ElseIf (CheckCg(str, "EE12C", 930, 933))
	ElseIf (CheckCg(str, "EE12D", 930, 934))
	ElseIf (CheckCg(str, "EE13A", 940, 941))
	ElseIf (CheckCg(str, "EE13B", 940, 942))
	ElseIf (CheckCg(str, "EE13C", 940, 943))
	ElseIf (CheckCg(str, "EE14", 950, 951))
	ElseIf (CheckCg(str, "EE15", 960, 961))
	ElseIf (CheckCg(str, "EE16A", 970, 971))
	ElseIf (CheckCg(str, "EE16B", 970, 972))
	ElseIf (CheckCg(str, "EE17A", 980, 981))
	ElseIf (CheckCg(str, "EE17B", 980, 982))
	ElseIf (CheckCg(str, "EE18", 990, 991))
	ElseIf (CheckCg(str, "EZ01A", 1000, 1001))
		cgInfo.effectParam.strType := "TileImage"
		cgInfo.effectParam.nInterval := 100
		cgInfo.effectParam.nDegreeStep := 0
		cgInfo.effectParam.sizeView := ISize(800, 600)
		cgInfo.effectParam.ptSpeed := IPoint(1, 0)
	ElseIf (CheckCg(str, "EZ01B", 1000, 1002))
		cgInfo.effectParam.strType := "TileImage"
		cgInfo.effectParam.nInterval := 100
		cgInfo.effectParam.nDegreeStep := 0
		cgInfo.effectParam.sizeView := ISize(800, 600)
		cgInfo.effectParam.ptSpeed := IPoint(1, 0)
	ElseIf (CheckCg(str, "EZ02", 1010, 1011))
	ElseIf (CheckCg(str, "EZ03", 1020, 1021))
	ElseIf (CheckCg(str, "EZ04A", 1030, 1031))
	ElseIf (CheckCg(str, "EZ04B", 1030, 1032))
	ElseIf (CheckCg(str, "EZ05A", 1040, 1041))
	ElseIf (CheckCg(str, "EZ05B", 1040, 1042))
	ElseIf (CheckCg(str, "EZ05C", 1040, 1043))
	ElseIf (CheckCg(str, "EZ05D", 1040, 1044))
	ElseIf (CheckCg(str, "EZ06A", 1050, 1051))
	ElseIf (CheckCg(str, "EZ06B", 1050, 1052))
	ElseIf (CheckCg(str, "EZ06C", 1050, 1053))
	ElseIf (CheckCg(str, "EZ06D", 1050, 1054))
	ElseIf (CheckCg(str, "EZ06E", 1050, 1055))
	ElseIf (CheckCg(str, "EZ06F", 1050, 1056))
	ElseIf (CheckCg(str, "EZ07", 1060, 1061))
	ElseIf (CheckCg(str, "EZ08", 1070, 1071))
	ElseIf CheckCg(str, "SP")
	EndIf
	cgInfo.timeZone := timeZone
	cgInfo.filename := str
EndFunc

