@IF	@IsDefined("__BUILD_ONE__") == 0
Include	"yosuga.ch"
@ENDIF

BUSTUP_XPOS += 0
BUSTUP_XPOS += 0
BUSTUP_XPOS += 80
BUSTUP_XPOS += 160
BUSTUP_XPOS += 240
BUSTUP_XPOS += 320
BUSTUP_XPOS += 400
BUSTUP_XPOS += 480
BUSTUP_XPOS += 560
BUSTUP_XPOS += 640
BUSTUP_XPOS += 720
BUSTUP_XPOS += 800
kinsoku := "、。」』ヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎ々！？"

Function AdvScreen::setToneFilter(String type)
	type.MakeUpper()
	If (this.typeToneFilter != type)
		If (type == "")
			type := "NORMAL"
		EndIf
		If (this.toneFilter[type].GetType() == "ToneFilter")
			this.typeToneFilter := type
		EndIf
		Debug("Tone-" + this.typeToneFilter)
		this.reqToneFilter := true
		this.fUpdate := true
	EndIf
EndFunc

Function AdvScreen::actionJump(Integer id)
	Reference rTarget
	Integer i
	i := 0
	While (i < (this.bustupMan.info.GetLength()))
        If (this.bustupMan.info[i].id == id)
            rTarget := this.bustupMan.spr[i]
			Break
        EndIf
        i += 1
    EndWhile
    If (i == (this.bustupMan.info.GetLength()))
        Return
    EndIf
	SpriteParam param
	rTarget.GetParameter(param)
	Reference pt
	pt := param.ptDstPos
	Bezier2D bzCurve1
	Bezier2D bzCurve2
	bzCurve1.SetLinear(pt.x, pt.y, pt.x, pt.y - 25)
	bzCurve2.SetLinear(pt.x, pt.y - 25, pt.x, pt.y)
	bzCurve1.SetAcceleration(3.0, 0.0)
	bzCurve2.SetAcceleration(3.0, 0.0)
	rTarget.SetBezierCurve(bzCurve1)
	rTarget.BeginActivation(200)
	WaitUntilSpriteActive(rTarget, 0)
	rTarget.SetBezierCurve(bzCurve2)
	rTarget.BeginActivation(200)
	WaitUntilSpriteActive(rTarget, 0)
EndFunc

Function AdvScreen::actionShake(Integer id)
	Reference rTarget
	Integer i
	i := 0
	While (i < this.bustupMan.info.GetLength())
        If (this.bustupMan.info[i].id == id)
            rTarget := this.bustupMan.spr[i]
            Break
        EndIf
        i += 1
    EndWhile
    If (i == this.bustupMan.info.GetLength())
        Return
	EndIf
    SpriteParam param
    rTarget.GetParameter(param)
    Reference pt
	pt := param.ptDstPos
	Integer w := 25
	Bezier2D bzCurve1
	Bezier2D bzCurve2
	Bezier2D bzCurve3
	Bezier2D bzCurve4
	bzCurve1.SetLinear(pt.x, pt.y, pt.x - w, pt.y)
	bzCurve2.SetLinear(pt.x - w, pt.y, pt.x + w, pt.y)
	bzCurve3.SetLinear(pt.x + w, pt.y, pt.x - w, pt.y)
	bzCurve4.SetLinear(pt.x + w, pt.y, pt.x, pt.y)
	bzCurve1.SetAcceleration(3.0, 0.0)
	bzCurve2.SetAcceleration(3.0, 0.0)
	bzCurve3.SetAcceleration(3.0, 0.0)
	bzCurve4.SetAcceleration(3.0, 0.0)
	Integer time := 30
	rTarget.SetBezierCurve(bzCurve1)
	rTarget.BeginActivation(time)
	WaitUntilSpriteActive(rTarget, 0)
	Integer count := 1
	While (count >= 0)
        rTarget.SetBezierCurve(bzCurve2)
        rTarget.BeginActivation(time * 2)
        WaitUntilSpriteActive(rTarget, 0)
        count -= 1
        If (count >= 0)
            rTarget.SetBezierCurve(bzCurve3)
            rTarget.BeginActivation(time * 2)
            WaitUntilSpriteActive(rTarget, 0)
        EndIf
    EndWhile
    rTarget.SetBezierCurve(bzCurve4)
    rTarget.BeginActivation(time)
    WaitUntilSpriteActive(rTarget, 0)
EndFunc

Function AdvScreen::addjustMessage(Reference mess)
	addjustMessage_think(mess)
	mess := mess.Left(mess.GetLength() - 1)
EndFunc

Function AdvScreen::addjustMessage_(Reference mess)
	String temp
	Integer num := 19
	Integer index := 0
	While (mess.Char(index) == 10)
        index += 1
    EndWhile
    temp := mess.Middle(0, index)
    If (this.talkType == 0)
        While (index < mess.GetLength())
            temp += mess.Middle(index, num) + "\n"
            index += num
        EndWhile
    Else
        temp += mess.Middle(index, num) + "\n"
        index += num
        While (index < mess.GetLength())
            temp += ("　" + mess.Middle(index, num - 1)) + " \n"
            index += num
        EndWhile
    EndIf
    mess := mess.Replace("／", "\n")
    mess := temp
EndFunc

Function AdvScreen::addjustMessage_talk(Reference mess)
	String temp
	String char
	char := "／"
	Integer fTop := true
	Integer num := 28
	Integer index := 0
    While (mess.Char(index) == 10)
        index += 1
    EndWhile
    temp := mess.Middle(0, index)
	Integer length := mess.GetLength() - index
    While (index < mess.GetLength())
        Integer i := 0
        Integer fRet := 0
        Integer num_
        If (fTop == true)
            num_ := num
        Else
            num_ := num - 1
        EndIf
        While (i < num_)
            If (mess.Char(index + i) == char.Char(0))
                If (fTop == true)
                    temp += mess.Middle(index, i + 1)
                Else
                    temp += " " + mess.Middle(index, i + 1)
                EndIf
                fRet := true
                i += 1
                Break
            EndIf
			i += 1
        EndWhile
        If ((i == num_) & (fRet == 0))
            Integer fKinsoku := 0
            Integer iKin := 0
            While (iKin < kinsoku.GetLength()) ; //TODO
                If (mess.Char(index + i) == kinsoku.Char(iKin))    ; //TODO
                    fKinsoku := true
                    Break
                EndIf
                iKin += 1
            EndWhile
            If (fTop == true)
                if (fKinsoku == 0)
                    temp += mess.Middle(index, i) + "\n"
                Else
                    temp += mess.Middle(index, i + 1) + "\n"
                    i += 1
                EndIf
            Else
                If (fKinsoku == 0)
                    temp += " " + mess.Middle(index, i) + "\n"
                Else
                    temp += " " + mess.Middle(index, i + 1) + "\n"
                    i += 1
				EndIf
            EndIf
        EndIf
        If (fTop == true)
            fTop := 0
        EndIf
        index += i
    EndWhile
    temp := temp.Replace("／", "\n")
    mess := temp
EndFunc

Function AdvScreen::addjustMessage_think(Reference mess)
	String temp
	String char
	char :=  "／"
	Integer num := 28
	Integer index := 0
    While (mess.Char(index) == 10)
        index += 1
    EndWhile
    temp := mess.Middle(0, index)
	Integer length := mess.GetLength() - index
    While (index < mess.GetLength())
        Integer i := 0
        Integer fRet := 0
        While (i < num)
            If (mess.Char(index + i) == char.Char(0))
                temp += mess.Middle(index, i + 1)
                fRet := true
                i += 1
                Break
            EndIf
            i += 1
        EndWhile
        If ((i == num) & (fRet == 0))
            Integer fKinsoku := 0
            Integer iKin := 0
            While (iKin < kinsoku.GetLength()) ; //TODO
                If (mess.Char(index + i) == kinsoku.Char(iKin)) ; //TODO
                    fKinsoku := true
                    Break
				EndIf
                iKin += 1
            EndWhile
            If (fKinsoku == 0)
                temp += mess.Middle(index, i) + "\n"
            Else
                temp += mess.Middle(index, i + 1) + "\n"
                i += 1
            EndIf
        EndIf
        index += i
    EndWhile
    temp := temp.Replace("／", "\n")
    mess := temp
EndFunc

Function AdvScreen::addSelect(String str, Integer flag)
	this.selectItem += str
EndFunc

Function AdvScreen::autoMode(Integer f)
    this.fAutoMode := f
    this.msgFrame.autoMode(f)
EndFunc

Function AdvScreen::beginAnimation()
    If (this.fCreate == 0)
        Return
    EndIf
    If (this.cg.effectParam.strType != "Nothing")
        this.sprCg.SetEffectParameter(this.cg.effectParam)
    EndIf
    Integer i := 0
    While (i < 5)
        If (this.bustupMan.info[i].status != 0)
            this.bustupMan.spr[i].BeginAnimation(MakeRandom(true, 27))
        EndIf
        i += 1
    EndWhile
EndFunc

Function AdvScreen::bustupClear(Integer id)
    Debug("CharClear-" + ("" := id))
    this.bustupMan.clear(id)
    this.fSetBustup := true
    this.fUpdate := true
EndFunc

Function AdvScreen::bustupDown(Integer id, Integer mv, Integer time, Integer accel)
    this.bustupMan.down(id, mv, time, accel)
    this.fUpdate := true
EndFunc

Function AdvScreen::bustupJump(Integer id)
	this.bustupMan.jump(id)
	this.fUpdate := true
EndFunc

Function AdvScreen::bustupLeave(Integer id, Integer mx, Integer my, Integer fFade, Integer time, Integer accel)
    Debug("CharLeave-" + ("" := id))
	this.bustupMan.leave(id, mx, my, fFade, time, accel)
	this.fSetBustup := true
	this.fUpdate := true
EndFunc

Function AdvScreen::bustupMove(Integer id, Integer pos)
	this.bustupMan.move(id, pos)
	this.fSetBustup := true
	this.fUpdate := true
EndFunc

Function AdvScreen::bustupShake(Integer id)
	this.bustupMan.shake(id)
	this.fUpdate := true
EndFunc

Function AdvScreen::callConfig()
	this.msgFrame.enable(0)
	ConfigWindow win
	win.create()
	win.show()
	If (isSelect() == true)
        transparencySelect(256)
    EndIf
	Integer ret := win.run()
	If (isSelect() == true)
        transparencySelect(0)
    EndIf
	win.hide(true)
	win.destroy()
	this.msgFrame.enable(true)
	Return ret
EndFunc

Function AdvScreen::callESCMenu()
	this.fEscMenu := true
	Integer ret
	this.escWindow.create()
	this.escWindow.show()
	ret := this.escWindow.run()
	this.escWindow.hide(true)
	this.escWindow.destroy()
	this.fEscMenu := 0
	Return ret
EndFunc

Function AdvScreen::callHistory()
	If (scObj.nameLog.num() <= 1) ;//TODO
        Return 0
    EndIf
    If (isSelect() == true)
        this.transparencySelect(256)
	Else
        this.msgFrame.hideBlink()
    EndIf
	HistoryWindow win
	win.create()
	win.show()
	hideMessage()
	win.run()
	if (isSelect() == true)
        this.transparencySelect(0)
    Else
        this.msgFrame.showBlink()
    EndIf
	showMessage()
	win.hide(true)
	win.destroy()
EndFunc

Function AdvScreen::callLoadSave(Integer fLoad, Reference arrayHideSpr, Reference arrayShowSpr)
	Integer index := arrayShowSpr.GetLength()
	arrayShowSpr[index] := Reference
	arrayShowSpr[index] := this.msgFrame.sprParent
	index += 1
	If (isSelect() == true)
        Integer i := 0
        While (i < this.selectItem.GetLength())
            arrayShowSpr[index] := Reference
            arrayShowSpr[index] := this.sprSelect[i]
            index += 1
            i += 1
        EndWhile
    EndIf
    this.msgFrame.enable(false)
	LoadSaveWindow win
	win.create(fLoad)
	win.show()
	this.msgFrame.hide()
	If (isSelect() == true)
        transparencySelect(256)
    EndIf
    Integer ret := win.run(arrayHideSpr, arrayShowSpr)
	If (isSelect() == true)
        transparencySelect(false)
    EndIf
	this.msgFrame.show()
	win.hide(true) 
	win.destroy()
	this.msgFrame.enable(true)
	Return ret
EndFunc

Function AdvScreen::changeStyle(Integer style)
	If (this.fCreate == 0)
        Return
    EndIf
	screen.Lock()
	this.msgFrame.changeStyle(style)
	If (isSelect() == true)
        this.msgFrame.output("", "\n", true)
        setupSelectItem()
        transparencySelect(0, true)
    EndIf
	screen.Unlock()
EndFunc

Function AdvScreen::clearMessage()
	this.msgFrame.clear()
EndFunc

Function AdvScreen::copyAdvScreen(Reference spr)
	spr.Release()
	spr.CreateSprite(67108865, ScreenSize.w, ScreenSize.h)
	screen.Lock()
	Integer fHide
	If (adv.msgFrame.isShow() == true)
        adv.msgFrame.hide(true)
        fHide := true
    EndIf
	Integer i := 0
    While (i < 5)
        Reference info := this.bustupMan.info[i]
        If (info.status == 128)
            this.bustupMan.spr[i].SetVisible(0)
        EndIf
        i += 1
    EndWhile
	screen.Refresh()
	SpriteParam param
	this.sprAdvBase.GetParameter(param)
	param.nFlags |= 16
	spr.DrawImage(this.sprAdvBase, param)
	If (fHide == true)
        adv.msgFrame.show(true)
	EndIf
    i := 0
    While (i < 5)
        Reference info := this.bustupMan.info[i]
        If (info.status == 128)
            this.bustupMan.spr[i].SetVisible(true)
        EndIf
        i += 1
    EndWhile
	screen.Unlock()
EndFunc

Function AdvScreen::copyBustup(Integer id, Reference sprDst)
	screen.Lock()
	this.sprCg.SetVisible(0)
	Integer i := 0
    While (i < 5)
        Reference info := this.bustupMan.info[i]
        If (i != id)
            this.bustupMan.spr[i].SetVisible(0)
        EndIf
        i += 1
    EndWhile
	screen.Refresh()
	ImageInfo info
	info := this.bustupMan.spr[id].GetInfo()
	sprDst.Release()
	
	sprDst.CreateSprite(67108865, info.nImageWidth, info.nImageHeight)
	SpriteParam param
	this.bustupMan.spr[id].GetParameter(param)
	Rect rect
	rect := IRect(info.ptDstPos.x - (info.nImageWidth / 2), info.ptDstPos.y - info.nImageHeight + 50, info.ptDstPos.x + info.nImageWidth, info.ptDstPos.y + info.nImageHeight)
	this.sprAdvBase.GetParameter(info)
	sprDst.DrawImage(this.sprAdvBase, info, 0, rect)
	this.sprCg.SetVisible(true)
	i := 0
    While (i < 5)
        Reference info := this.bustupMan.info[i]
        If (i != id)
            this.bustupMan.spr[i].SetVisible(true)
        EndIf
        i += 1
    EndWhile
	screen.Unlock()
EndFunc

Function AdvScreen::create()
	If (this.fCreate == false)
        this.sprAdvBase.CreateSprite(67108865, ScreenSize.w, ScreenSize.h)
        screen.AddSprite(51000, this.sprAdvBase)
        this.sprAdvBase.SetVisible(true)
        this.sprBustupParent.CreateSprite(67108865, ScreenSize.w, ScreenSize.h)
        this.sprAdvBase.AddSprite(40, this.sprBustupParent)
        this.sprBustupParent.SetVisible(true)
        this.msgFrame.create()
        this.cg.clear()
        this.bustupMan.create(5)
        Integer i := 0
        While (i < 5)
            this.bustupMan.info[i].clear()
            i += 1
        EndWhile
        createToneFilter()
        this.sprAdvBase.AttachToneFilter(this.toneFilter["NORMAL"])
        zoom(400, 300, 800, 600)
        this.fKeyUpdateFlush := true
        this.fUpdate := false
        this.fSelect := false
        this.selectItem.Remove()
        this.fSkip := false
        this.fAutoMode := false
        this.fCreate := true
	EndIf
EndFunc

Function AdvScreen::createToneFilter()
	this.toneFilter["NORMAL"] := ToneFilter
	this.toneFilter["NORMAL"].SetGeneralTone(0, 0, 0, 0, 0, 0, 0, 0, 1 | 2)
	this.toneFilter["NEGATIVE"] := ToneFilter
	this.toneFilter["NEGATIVE"].SetGeneralTone(512, 1, 512, 1, 512, 1, 0, 0, 2)
	this.toneFilter["MONOCHROME"] := ToneFilter
    this.toneFilter["MONOCHROME"].SetGeneralTone(0, 1, 0, 1, -256, 1, 0, 0, 4 | 2)
	this.toneFilter["MONO_NEGATIVE"] := ToneFilter
	this.toneFilter["MONO_NEGATIVE"].SetGeneralTone(0, 1, 0, 1, 512, 1, 0, 0, 4 | 2)
	this.toneFilter["SEPIA"] := ToneFilter
	this.toneFilter["SEPIA"].SetGeneralTone(298 - 256, 0, 180 - 256, 0, 266 - 256, 0,0, 0, 4 | 2)
	this.toneFilter["LOSE"] := ToneFilter
	this.toneFilter["LOSE"].SetGeneralTone(137 - 256, 1, 386 - 256, 1, 256 - 256, 0, 0, 0, 4 | 2)
EndFunc

Function AdvScreen::destroy()
    If (this.fCreate == true)
        flushUpdate()
        screen.DetachSprite(this.sprAdvBase)
        If (this.sprTemp["transBase"].GetType() == "Sprite")
            screen.DetachSprite(this.sprTemp["transBase"])
            this.sprTemp.Remove()
        EndIf
        this.sprAdvBase.DetachAllSprite()
        this.sprAdvBase.Release()
        this.sprCg.Release()
        this.sprBustupParent.DetachAllSprite()
        this.sprBustupParent.Release()
        this.msgFrame.destroy()
        this.fCreate := 0
    EndIf
EndFunc

Function AdvScreen::effectFlush(String color, Integer time, String cgFile)
	Sprite spr
	If (IsUNK1)
	Else
		If (color == "BLACK")
			CreateRGBImage(spr, RGB(0, 0, 0), ScreenSize.w, ScreenSize.h)
		ElseIf (color == "WHITE")
			CreateRGBImage(spr, RGB(255, 255, 255), ScreenSize.w, ScreenSize.h)
		ElseIf (color == "RED")
			CreateRGBImage(spr, RGB(255, 0, 0), ScreenSize.w, ScreenSize.h)
		ElseIf (color == "GREEN")
			CreateRGBImage(spr, RGB(0, 255, 0), ScreenSize.w, ScreenSize.h)
		ElseIf (color == "BLUE")
			CreateRGBImage(spr, RGB(0, 0, 255), ScreenSize.w, ScreenSize.h)
		Else
			spr.LoadImage(color + ".eri")
		EndIf
	EndIf
	screen.AddSprite(50900, spr)
	spr.SetVisible(true)
	update(true)
	spr.SetBlendingEnvelope(256)
	spr.BeginActivation(time)
	WaitUntilSpriteActive(spr, 0)
	screen.DetachSprite(spr)
EndFunc

Function AdvScreen::effectQuake(Integer w, Integer h, Integer fWhole, Integer count, Integer time)
	Reference rTarget
	Sprite spr
	If (fWhole == 0)
		spr := this.sprCg
		spr.SetTransparency(98)
		spr.SetVisible(true)
		this.sprAdvBase.AddSprite(50, spr)
		rTarget := spr
	Else
		rTarget := this.sprAdvBase
	EndIf
	SpriteParam param
	rTarget.GetParameter(param)
	Reference pt
	pt := param.ptDstPos
	Bezier2D bzCurve1
	Bezier2D bzCurve2
	Bezier2D bzCurve3
	Bezier2D bzCurve4
	bzCurve1.SetLinear(pt.x + 0, pt.y + 0, pt.x - w, pt.y - h)
	bzCurve2.SetLinear(pt.x - w, pt.y - h, pt.x + w, pt.y + h)
	bzCurve3.SetLinear(pt.x + w, pt.y + h, pt.x - w, pt.y - h)
	bzCurve4.SetLinear(pt.x + w, pt.y + h, pt.x + 0, pt.y + 0)
	If (time == 0)
		time := 30
	EndIf
	rTarget.SetBezierCurve(bzCurve1)
	rTarget.BeginActivation(time)
	WaitUntilSpriteActive(rTarget, 0)
	While (count >= 0)
		rTarget.SetBezierCurve(bzCurve2)
		rTarget.BeginActivation(time * 2)
		WaitUntilSpriteActive(rTarget, 0)
		count -= 1
		If (count >= 0)
			rTarget.SetBezierCurve(bzCurve3)
			rTarget.BeginActivation(time * 2)
			WaitUntilSpriteActive(rTarget, 0)
		EndIf
	EndWhile
	rTarget.SetBezierCurve(bzCurve4)
	rTarget.BeginActivation(time)
	WaitUntilSpriteActive(rTarget, 0)
	If (fWhole == 0)
		spr.SetVisible(0)
		this.sprAdvBase.DetachSprite(spr)
	EndIf
EndFunc

Function AdvScreen::enableKeyUpdateFlush(Integer f)
	this.fKeyUpdateFlush := f
EndFunc

Function AdvScreen::enterSelect()
	this.fSelect := true
EndFunc

Function AdvScreen::flushUpdate()
	if (this.fUpdating == true)
        screen.Lock()
        this.sprTemp["transBase"].DetachAllSprite()
        this.sprTemp["transBase"].SetVisible(0)
        this.sprTemp["dummyCg"].SetVisible(0)
        this.sprTemp["transBase"].DetachSprite(this.sprTemp["dummyCg"])
        screen.DetachSprite(this.sprTemp["transBase"])
        this.sprTemp["transBase"].Release()
        this.sprTemp["dummyCg"].Release()
        this.sprTemp.RemoveAll()
        this.sprAlpha.Release()
        screen.Unlock()
        this.fUpdating := 0
    EndIf
    If (this.sprAdvBase.IsActivation() == true)
        this.sprAdvBase.FlushActivation()
    EndIf
EndFunc

Function AdvScreen::font(Integer size, Integer fBold, Integer fItalic, String face)
	this.msgSequence := CreateMessageEscapeSequence(size, size + 2, fBold, fItalic, face)
	this.reqFont := true
EndFunc

Function AdvScreen::getMessageView()
	Return this.msgFrame.getView()
EndFunc

Function AdvScreen::getSelectResult()
	Return this.selectResult
EndFunc

Function AdvScreen::getToneFilter()
	Return this.typeToneFilter
EndFunc

Function AdvScreen::getZoomParam()
	Return this.zoomParam
EndFunc

Function AdvScreen::hideMessage(Integer fFlush, Integer fWait)
	If (isSelect() == true)
        transparencySelect(256)
    EndIf
	this.msgFrame.hide(fFlush, fWait)
EndFunc

Function AdvScreen::hideSelectItem()
	screen.Lock()
	Integer i := 0
	If (cnfObj.screenEffect == 0)
        While (i < this.selectItem.GetLength())
            this.sprSelect[i].SetBlendingEnvelope(256)
            this.sprSelect[i].BeginActivation(300)
            i += 1
        EndWhile
    Else
		While (i < this.selectItem.GetLength())
			this.sprSelect[i].SetTransparency(256)
			i += 1
		EndWhile
	EndIf
	screen.Unlock()
EndFunc

Function AdvScreen::isAutoMode()
	Return this.fAutoMode
EndFunc

Function AdvScreen::isCreate()
	Return this.fCreate
EndFunc

Function AdvScreen::isKeyUpdateFlush()
	If (this.fKeyUpdateFlush == true)
        Return isSkip() | input.IsJoyButtonPushing(6)
    Else
		Return 0
	EndIf
EndFunc

Function AdvScreen::isSelect()
	Return this.fSelect
EndFunc

Function AdvScreen::isShowMessage()
	Return this.msgFrame.isShow()
EndFunc

Function AdvScreen::isSkip()
	Return this.fSkip
EndFunc

Function AdvScreen::isToneFilter()
	Return this.fToneFilter
EndFunc

Function AdvScreen::isUpdate()
	Return this.fUpdate
EndFunc

Function AdvScreen::isZoom()
	Return this.fZoom
EndFunc

Function AdvScreen::leaveSelect()
	this.fSelect := 0
EndFunc

Function AdvScreen::loadBustup(Reference spr, Reference info)
	SpriteParam sprParam
	ImageInfo sprInfo
	If (spr.LoadImage(info.filename + ".eri") != 0)
		If (0 == true)
			Sprite sprTemp
			If (info.filename.Find("CA") != true)
				sprTemp.LoadImage("CA02_01M.eri")
			ElseIf (info.filename.Find("CB") != true)
				sprTemp.LoadImage("CB01_01M.eri")
			ElseIf (info.filename.Find("CC") != true)
				sprTemp.LoadImage("CC01_01M.eri")
			ElseIf (info.filename.Find("CD") != true)
				sprTemp.LoadImage("CD01_01M.eri")
			ElseIf (info.filename.Find("CE") != true)
				sprTemp.LoadImage("CE01_01M.eri")
			ElseIf (info.filename.Find("CF") != true)
				sprTemp.LoadImage("CF01_01M.eri")
			ElseIf (info.filename.Find("CG") != true)
				sprTemp.LoadImage("CG01_01M.eri")
			ElseIf (info.filename.Find("CH") != true)
				sprTemp.LoadImage("CH01_01M.eri")
			ElseIf (info.filename.Find("CJ") != true)
				sprTemp.LoadImage("CJ01_01M.eri")
			ElseIf (info.filename.Find("CK") != true)
				sprTemp.LoadImage("CI.eri")
			Else
				sprTemp.LoadImage("CZ.eri")
			EndIf
			sprInfo := sprTemp.GetInfo()
			sprTemp.GetParameter(sprParam)
			spr.CreateSprite(67108865, sprInfo.nImageWidth, sprInfo.nImageHeight)
			sprParam.ptDstPos := IPoint(0, 0)
			spr.DrawImage(sprTemp, sprParam)
			spr.SetBackColor(0, 0)
			
			DrawTextParam param
			param.rcArea := IRect(0, 0, sprInfo.nImageWidth, sprInfo.nImageHeight)
			param.nFlags |= 16
			param.nTransparency := 0
			param.strFontFace := "ＭＳ ゴシック"
			param.ptCurPos := IPoint(0, 300)
			param.rgbColor := RGB(255, 0, 0)
			param.nLineHeight :=26
			param.nIndentWidth := 26
			param.nFontSize := 26
			spr.DrawText(param, "仮 : " + info.filename)
			OutputLogText("CG.log", "NotFound-" + info.filename)
		EndIf
	EndIf
	sprInfo := spr.GetInfo()
	spr.GetParameter(sprParam)
	sprParam.ptRevCenter := IPoint(sprInfo.nImageWidth / 2, sprInfo.nImageHeight - 50)
	sprParam.nTransparency := 0
	spr.SetParameter(sprParam)
	spr.SetBackColor(0, 0)
EndFunc

Function AdvScreen::loadCg(Reference spr, String filename)
	If (spr.LoadImage(filename + ".eri") != 0)
		If (0 == true)
			SpriteParam sprParam
			Sprite sprTemp
			If (File.IsExisting(filename.Left(3) + ".eri") == true)
				sprTemp.LoadImage(filename.Left(3) + ".eri")
			ElseIf (File.IsExisting(filename.Left(4) + ".eri") == true)
				sprTemp.LoadImage(filename.Left(4) + ".eri")
			ElseIf (filename.Char(0) == 66)
				sprTemp.LoadImage("dummyBg.eri")
			Else
				sprTemp.LoadImage("dummyEv.eri")
			EndIf
			sprTemp.GetParameter(sprParam)
			spr.CreateSprite(1, ScreenSize.w, ScreenSize.h)
			sprParam.ptDstPos := IPoint(0, 0)
			spr.DrawImage(sprTemp, sprParam)
			spr.SetBackColor(0, 0)
			
			DrawTextParam param
			param.rcArea := IRect(0, 0, ScreenSize.w, ScreenSize.h)
			param.ptCurPos := IPoint(32, 16)
			param.rgbColor := RGB(255, 0, 0)
			param.nTransparency := 0
			param.nLineHeight := 50
			param.nIndentWidth := 50
			param.nFontSize := 48
			param.strFontFace := "ＭＳ ゴシック"
			spr.DrawText(param, "仮 : " + filename)
			OutputLogText("CG.log", "NotFound-" + filename)
		EndIf
	EndIf
	spr.SetBackColor(0, 0)
EndFunc

Function AdvScreen::mess(String str)
	this.msgInfo.message += str
EndFunc

Function AdvScreen::messageView(Integer type)
	this.msgFrame.view(type)
EndFunc

Function AdvScreen::name(String str, String voice)
	this.msgInfo.name := str
	this.msgInfo.voice := voice
	If ((str == "") | (str == "心の声") | (str == "語り"))
        this.talkType := 0
    Else
        this.talkType := 1
    EndIf
EndFunc

Function AdvScreen::playVoice(Reference file)
	Integer ret
	ret := PlayVoice(file)
	Return ret
EndFunc

Function AdvScreen::scroll(Integer x, Integer y, Integer time, Integer accel, Integer fWait)
	If (this.fSetCg == 0)
		If (this.sprCg.IsActivation() == true)
			this.sprCg.FlushActivation()
		EndIf
		SpriteParam param
		this.sprCg.GetParameter(param)
		Bezier2D bz
		bz.SetLinear(param.ptDstPos.x, param.ptDstPos.y, -x, -y)
		bz.SetAcceleration(accel, 0)
		this.sprCg.SetBezierCurve(bz)
		Integer fFlush := (cnfObj.screenEffect == 1)
		fFlush |= (isSkip() | input.IsJoyButtonPushing(6))
		If (fFlush == true)
			this.sprCg.BeginActivation(0)
		Else
			this.sprCg.BeginActivation(time)
		EndIf
		If (fWait != 0)
			WaitUntilSpriteActive(this.sprCg, true)
		EndIf
		this.cg.pt := IPoint(x, y)
	Else
		this.fUpdate := true
		this.fScroll := true
		this.scrlParam.set(IPoint(-x, -y), time, accel)
	EndIf
EndFunc

Function AdvScreen::setBustup(String str, Integer pos, Integer priority)
	Debug("Char-" + str)
	this.bustupMan.set(str, pos, priority, this.cg.timeZone)
	this.fSetBustup := true
	this.fUpdate := true
EndFunc

Function AdvScreen::setCg(String str, Integer x, Integer y, Integer w, Integer h)
	Debug("CG-" + str)
	CheckSetupCg(str, this.cg)
	this.cg.pt := IPoint(x, y)
	this.fSetCg := true
	this.fSetCgRGB := 0
	this.fUpdate := true
EndFunc

Function AdvScreen::setCgRGB(Integer r, Integer g, Integer b)
	Debug("CGRGB-" + ("" := r) + "," + ("" := g) + "," + ("" := b))
	this.cg.pt := IPoint(0, 0)
	this.colSetCgRGB := RGB(r, g, b)
	this.fSetCg := true
	this.fSetCgRGB := true
	this.fUpdate := true
EndFunc

Function AdvScreen::setTransition(String type, Integer time)
	this.fTransition := true
	this.transInfo.type := type
	this.transInfo.time := time
EndFunc

Function AdvScreen::setupSelectItem()
	Integer i
	i := 0
	While(i < this.sprSelect.GetLength())
		screen.DetachSprite(this.sprSelect[i])
		i += 1
	EndWhile
	this.sprSelect.Remove()
	Point curPos
	curPos := this.msgFrame.msprMess.GetCursorPos()
	Integer start_y := 264 - (52 * this.selectItem.GetLength()) / 2
	SpriteParam param
	i := 0
	While (i < this.selectItem.GetLength())
		this.sprSelect[i] := Sprite
		frameSkin.CreateFormPage(this.sprSelect[i], "ID_PAGE_ADVSELECT")
		this.sprSelect[i].GetParameter(param)
		param.ptRevCenter := IPoint(375, 24)
		this.sprSelect[i].SetParameter(param)
		this.sprSelect[i].MovePosition(400, start_y + 52 * i)
		this.sprSelect[i].SetSpriteText("ID_TEXT", this.selectItem[i])
		this.sprSelect[i].SetTransparency(256)
		this.sprSelect[i].SetVisible(true)
		screen.AddSprite(50600, this.sprSelect[i])
		i += 1
	EndWhile
EndFunc

Function AdvScreen::showMessage(Integer fFlush, Integer fHide)
	If (isSelect() == true)
		transparencySelect(0)
	EndIf
	this.msgFrame.show(fFlush, fHide)
EndFunc

Function AdvScreen::showSelectItem()
	Bezier2D bzMag
	bzMag.SetLinear(0.0, 0.0, 1.0, 1.0)
	bzMag.SetAcceleration(3.0, 0.0)
	screen.Lock()
	Integer i := 0
	If (cnfObj.screenEffect == 0)
		While (i < this.selectItem.GetLength())
			this.sprSelect[i].SetBlendingEnvelope(0)
			this.sprSelect[i].SetBezierCurve(Reference, Reference, bzMag)
			this.sprSelect[i].BeginActivation(300)
			i += 1
		EndWhile
	Else
		While (i < this.selectItem.GetLength())
			this.sprSelect[i].SetTransparency(0)
			i += 1
		EndWhile
	EndIf
	screen.Unlock()
EndFunc

Function AdvScreen::skip(Integer f)
	this.fSkip := f
	this.msgFrame.skip(f)
EndFunc

Function AdvScreen::startSelect()
	Integer ret := 0
	If (IsLoad() == true)
		If (scObj.hitretCountTemp < (scObj.hitretCount))
			scObj.hitretCountTemp += 1
			this.msgInfo.clear()
			this.selectResult := scObj.select[scObj.selectCount]
			scObj.selectCount += 1
			this.selectItem.Remove()
			Return ret
		EndIf
		LeaveLoad()
	EndIf
	enterSelect()
	SpriteParam param
	this.msgFrame.msprMess.GetParameter(param)
	Point curPos
	curPos := this.msgFrame.msprMess.GetCursorPos()
	setupSelectItem()
	showSelectItem()
	Integer i := 0
	Integer select := 0
	WndSpriteCmd wscmd
	FlushCommandQueue(true)
	FlushJoyButton()
	Integer nInput
	While (true)
		nInput := GetCommand(wscmd, 33)
		If (0 == true)
			If (IsDebugJump() == true)
				LeaveDebugJump()
				Change(GetDebugJumpScenario())
				ret := 40
				Break
			EndIf
		EndIf
		If (0)
		ElseIf (wscmd.strID == "ID_SELECT")
			Point pt
			pt := input.GetCursorPos()
			i := 0
			While (i < this.selectItem.GetLength())
				If (IsHitSprite(this.sprSelect[i], pt.x, pt.y))
					select := i + 1
					Break
				EndIf
				i += 1
			EndWhile
			Break
		ElseIf (input.GetJoyButtonPushed(4) > 0)
			FlushJoyButton()
		ElseIf ((wscmd.strID == "ID_CLOSE") | (input.GetJoyButtonPushed(5) > 0) | (input.GetJoyButtonPushed(8) > 0))
			If(isAutoMode() == true)
				autoMode(0)
			ElseIf (isSkip() == true)
				skip(0)
			Else
				hideSelectItem()
				Integer isShow := this.msgFrame.isShow()
				If (isShow == true)
					this.msgFrame.hide(0, true)
				EndIf
				TestHitret()
				showSelectItem()
				If (isShow == true)
					this.msgFrame.show(0, true)
				EndIf
			EndIf
			FlushJoyButton()
		ElseIf ((wscmd.strID == "ID_SKIP") | (input.GetJoyButtonPushed(28) > 0) | (input.GetJoyButtonPushed(7) > 0))
			skip(true)
			FlushCommandQueue(true)
			FlushJoyButton()
		ElseIf ((wscmd.strID == "ID_AUTO") | (input.GetJoyButtonPushed(27) > 0) | (input.GetJoyButtonPushed(14) > 0))
			autoMode(true)
			FlushCommandQueue(true)
			FlushJoyButton()
		ElseIf ((wscmd.strID == "ID_QLOAD") | (input.GetJoyButtonPushed(23) > 0) | (input.GetJoyButtonPushed(17) > 0))
			If (sysObj.fQSave == true)
				If (Confirm("クイックロードします", true) == true)
					QuickLoad()
					ret := 40
					Break
				EndIf
			EndIf
			FlushJoyButton()
		ElseIf ((wscmd.strID == "ID_QSAVE") | (input.GetJoyButtonPushed(22) > 0) | (input.GetJoyButtonPushed(9) > 0))
			If (IsRecollectMode() == 0)
				QuickSave()
				this.msgFrame.enableQLoad(true)
			EndIf
			FlushJoyButton()
		ElseIf ((wscmd.strID == "ID_CONFIG") | (input.GetJoyButtonPushed(26) > 0) | (input.GetJoyButtonPushed(13) > 0))
			ret := callConfig()
			If ((ret == 30) | (ret == 20))
				Break
			EndIf
			FlushJoyButton()
		ElseIf ((wscmd.strID == "ID_HISTORY") | (input.GetJoyButtonPushed(10) > 0) | (input.GetJoyButtonPushed(29) > 0) | (input.GetJoyButtonPushed(0) > 0))
			callHistory()
			FlushJoyButton()
		ElseIf ((wscmd.strID == "ID_LOAD") | (input.GetJoyButtonPushed(25) > 0) | (input.GetJoyButtonPushed(11) > 0))
			Array arrayHideSpr
			Array arrayShowSpr
			ret := callLoadSave(true, arrayHideSpr, arrayShowSpr)
			If (ret == 40)
				Break
			EndIf
			FlushJoyButton()
		ElseIf ((wscmd.strID == "ID_SAVE") | (input.GetJoyButtonPushed(24) > 0) | (input.GetJoyButtonPushed(12) > 0))
			Array arrayHideSpr
			Array arrayShowSpr
			ret := callLoadSave(0, arrayHideSpr, arrayShowSpr)
			If (ret == 40)
				Break
			EndIf
			FlushJoyButton()
		ElseIf (wscmd.strID == "ID_VOICE")
			PlayVoice(scObj.voiceLog.get(0), true)
			FlushJoyButton()
		EndIf
	EndWhile
	If (select != 0)
        If (cnfObj.screenEffect == 0)
            Reference rTarget
            i := 0
            While (i < this.selectItem.GetLength())
                If (select != (i + 1))
                    this.sprSelect[i].SetTransparency(256)
                Else
                    this.sprSelect[i].SetBlendingEnvelope(256)
                    this.sprSelect[i].BeginActivation(500)
                    rTarget := this.sprSelect[i]
                EndIf
                i += 1
            EndWhile
            WaitUntilSpriteActive(rTarget, 0)
        Else
            i := 0
            While (i < this.selectItem.GetLength())
                this.sprSelect[i].SetTransparency(256)
                i += 1
            EndWhile
        EndIf
    EndIf
    screen.Lock()
    i := 0
	While (i < this.selectItem.GetLength())
        screen.DetachSprite(this.sprSelect[i])
        i += 1
    EndWhile
	this.sprSelect.Remove()
	screen.Unlock()
	this.selectItem.Remove()
	If (IsLoad() == 0)
        this.selectResult := select
        scObj.hitretCount += 1
        scObj.select += select
    EndIf
	If ((isSkip() == true) && (cnfObj.lockSkip == 0))
        skip(0)
	EndIf
    leaveSelect()
    Return ret
EndFunc

Function AdvScreen::transparencySelect(Integer trans, Integer fFlush)
	If (cnfObj.screenEffect != 0)
		fFlush:= true
	EndIf
	Integer i := 0
	If (fFlush == 0)
		While (i < this.selectItem.GetLength())
			this.sprSelect[i].SetBlendingEnvelope(trans)
			this.sprSelect[i].BeginActivation(300)
			i += 1
		EndWhile
	Else
		While (i < this.selectItem.GetLength())
			this.sprSelect[i].SetTransparency(trans)
			i += 1
		EndWhile
	EndIf
EndFunc

Function AdvScreen::updateProc()
	If (this.fCreate == true)
		If (this.fUpdating == true)
			If (this.sprTemp["transBase"].IsActivation() == 0)
				flushUpdate()
			EndIf
		EndIf
		ImageInfo info
		For i:=0 To (5 - 1)
			info := this.bustupMan.spr[i].GetInfo()
			If ((this.bustupMan.info[i].status == 0) & (this.bustupMan.spr[i].IsActivation() == 0) & (info.nResourceBytes != 0))
				this.bustupMan.spr[i].SetVisible(0)
				this.bustupMan.spr[i].Release()
			EndIf
		Next
	EndIf
EndFunc

Function AdvScreen::waitScroll()
	If (this.sprCg.IsActivation() == true)
		If (isSkip() | input.IsJoyButtonPushing(6))
			this.sprCg.FlushActivation()
		Else
			WaitUntilSpriteActive(this.sprCg, true)
		EndIf
	EndIf
EndFunc

Function AdvScreen::waitUpdate()
	If (this.fUpdating == true)
		WaitUntilSpriteActive(this.sprTemp["transBase"], true)
		flushUpdate()
	EndIf
EndFunc

Function AdvScreen::zoom(Integer cx, Integer cy, Integer w, Integer h, Integer time, Integer accel)
	this.zoomParam.set(cx, cy, w, h, time, accel)
	If ((this.fZoom == 0) & (this.zoomParam.isZoom() == 0))
		Return
	EndIf
	if (this.fUpdate == 0)
		screen.Lock()
		SpriteParam param
		this.sprAdvBase.GetParameter(param)
		Bezier2D bzMov
		Bezier2D bzMag
		If (this.zoomParam.isZoom() == true)
			Real magH
			Real magV
			magH := this.zoomParam.horzUnit()
			magV := this.zoomParam.vertUnit()
			bzMov.SetLinear(param.ptDstPos.x, param.ptDstPos.y, -(cx - (w / 2)) * magH, -(cy - (h / 2)) * magV)
			bzMag.SetLinear(param.rHorzUnit, param.rVertUnit, magH, magV)
			this.fZoom := true
		Else
			bzMov.SetLinear(param.ptDstPos.x, param.ptDstPos.y, param.ptRevCenter.x, param.ptRevCenter.y)
			bzMag.SetLinear(param.rHorzUnit, param.rVertUnit, 1.0, 1.0)
			this.fZoom := false
		EndIf
		bzMov.SetAcceleration(accel, 0.0)
		bzMag.SetAcceleration(accel, 0.0)
		this.sprAdvBase.SetBezierCurve(bzMov, Reference, bzMag)
		this.sprAdvBase.BeginActivation(time)
		If ((cnfObj.screenEffect == 1) | (adv.isSkip() == true) | (adv.isKeyUpdateFlush() == true))
			this.sprAdvBase.FlushActivation()
		EndIf
		screen.Unlock()
		this.sprAdvBase.GetParameter(param)
	Else
		If (this.zoomParam.isZoom() == 0)
			this.fZoom := 0
		EndIf
		this.reqZoom := true
	EndIf
EndFunc

Function AdvScreen::hitret(Integer id, Integer fVoiceWait)
	Integer ret := 0
	Integer fFlush := isSkip() | input.IsJoyButtonPushing(6)
	Integer fLoadEnd := 0
	If (IsLoad() == true)
		If (scObj.hitretCountTemp < scObj.hitretCount)
			scObj.hitretCountTemp += 1
			this.msgInfo.clear()
			Return ret
		EndIf
		LeaveLoad()
		fLoadEnd := true
	Else
		If (isUpdate() == true)
			adv.update(fFlush)
		EndIf
	EndIf
	Integer fPlayVoice := 0
	Integer fVoiceFind := true
	If (File.IsExisting(this.msgInfo.voice + ".mio") == false)
		fVoiceFind := false
	EndIf
	If (fLoadEnd == false)
		this.msgFrame.clearPage()
		if (this.msgFrame.isShow() == false)
			this.msgFrame.show()
		EndIf
		String showName
		String trueName
		CheckTrueName(this.msgInfo.name, showName, trueName)
		If (CheckPlayVoice(trueName) == true)
			If ((this.msgInfo.voice != "") & (fFlush == false))
				fPlayVoice := playVoice(this.msgInfo.voice)
			EndIf
		EndIf
		this.msgInfo.message := this.msgInfo.message.Replace("／", "\n")
		this.msgInfo.message := this.msgInfo.message.Replace("　", "  ")
		String message
		message := this.msgSequence + this.msgInfo.message
		this.msgFrame.output(showName, message, fFlush)
		scObj.nameLog.add(this.msgInfo.name)
		scObj.messLog.add(this.msgInfo.message)
		scObj.seqLog.add(this.msgSequence)
		If (this.reqFont == true)
			this.msgSequence := CreateMessageEscapeSequence()
			this.reqFont := false
		EndIf
		If (fVoiceFind == true)
			this.msgFrame.showVoice()
			scObj.voiceLog.add(this.msgInfo.voice)
		Else
			this.msgFrame.hideVoice()
			scObj.voiceLog.add("")
		EndIf
	EndIf
	If (sysObj.readFlag.check(id) == false)
		sysObj.readFlag.set(id)
		If ((cnfObj.readSkip == true) & (isSkip() == true))
			If (IsDebug == true)
				If (IsDebugSearch() == false)
					skip(0)
				EndIf
			Else
				skip(0)
			EndIf
		EndIf
	EndIf
	Integer nowTime := GetCurrentTime()
	WndSpriteCmd wscmd
	FlushCommandQueue(true)
	If (isSkip() == true)
		If ((input.GetJoyButtonPushed(4) > 0) | (input.GetJoyButtonPushed(5) > 0))
			skip(false)
			If (IsDebug == true)
				EndDebugSearch()
			EndIf
			FlushJoyButton()
		EndIf
	Else
		FlushJoyButton()
	EndIf
	Integer nInput
	Integer fLoop := (isSkip() == false)
	If (IsDebug == true)
		If (IsDebugSearch() == true)
			If (this.msgInfo.message.Find(GetDebugSearchString()) != true)
				fLoop := true
				skip(false)
				EndDebugSearch()
			EndIf
		EndIf
	EndIf
	While (fLoop == true)
		nInput := GetCommand(wscmd, 33)
		If (IsDebug == true)
			If (IsDebugJump() == true)
				LeaveDebugJump()
				Change(GetDebugJumpScenario())
				ret := 40
				Break
			Else
				If (IsDebugSearch() == true)
					Break
				EndIf
			EndIf
		EndIf
		If (IsUNK1)
		ElseIf ((input.GetJoyButtonPushed(4) > 0) | (input.GetJoyButtonPushed(1) > 0))
			If (this.msgFrame.isPending() == true)
				this.msgFrame.flush()
				FlushJoyButton()
			Else
				Break
			EndIf
		ElseIf ((wscmd.strID == "ID_CLOSE") | (input.GetJoyButtonPushed(5) > 0) | (input.GetJoyButtonPushed(8) > 0))
			If (isAutoMode() == false)
				Integer isShow := this.msgFrame.isShow()
				If (isShow == true)
					this.msgFrame.hide(false, true)
				EndIf
				TestHitret()
				If (isShow == true)
					this.msgFrame.show(false, true)
				EndIf
			Else
				autoMode(false)
			EndIf
			FlushJoyButton()
		ElseIf ((wscmd.strID == "ID_SKIP") | (input.GetJoyButtonPushed(28) > 0) | (input.GetJoyButtonPushed(7) > 0))
			skip(true)
			Break
		ElseIf ((wscmd.strID == "ID_AUTO") | (input.GetJoyButtonPushed(27) > 0) | (input.GetJoyButtonPushed(14) > 0))
			If (isAutoMode() == true)
				autoMode(false)
			Else
				autoMode(true)
				this.msgFrame.hideBlink()
				nowTime := GetCurrentTime()
			EndIf
			FlushJoyButton()
		ElseIf ((wscmd.strID == "ID_QLOAD") | (input.GetJoyButtonPushed(23) > 0) | (input.GetJoyButtonPushed(17) > 0))
			If (IsRecollectMode() == false)
				If (sysObj.fQSave == true)
					If (Confirm("クイックロードします", true) == true)
						QuickLoad()
						ret := 40
						Break
					EndIf
				EndIf
			EndIf
			FlushJoyButton()
		ElseIf ((wscmd.strID == "ID_QSAVE") | (input.GetJoyButtonPushed(22) > 0) | (input.GetJoyButtonPushed(9) > 0))
			If (IsRecollectMode() == false)
				QuickSave()
				this. msgFrame.enableQLoad(true)
			EndIf
			FlushJoyButton()
		ElseIf ((wscmd.strID == "ID_CONFIG") | (input.GetJoyButtonPushed(26) > 0) | (input.GetJoyButtonPushed(13) > 0))
			ret := callConfig()
			If ((ret == 30) | (ret == 20))
				Break
			EndIf
			FlushJoyButton()
		ElseIf ((wscmd.strID == "ID_HISTORY") | (input.GetJoyButtonPushed(10) > 0) | (input.GetJoyButtonPushed(29) > 0) | (input.GetJoyButtonPushed(0) > 0))
			callHistory()
			FlushJoyButton()
		ElseIf ((wscmd.strID == "ID_LOAD") | (input.GetJoyButtonPushed(25) > 0) | (input.GetJoyButtonPushed(11) > 0))
			If (IsRecollectMode() == false)
				Array arrayHideSpr
				Array arrayShowSpr
				ret := callLoadSave(true, arrayHideSpr, arrayShowSpr)
				If (ret == 40)
					Break
				EndIf
			EndIf
			FlushJoyButton()
		ElseIf ((wscmd.strID == "ID_SAVE") | (input.GetJoyButtonPushed(24) > 0) | (input.GetJoyButtonPushed(12) > 0))
			If (IsRecollectMode() == false)
				Array arrayHideSpr
				Array arrayShowSpr
				ret := callLoadSave(false, arrayHideSpr, arrayShowSpr)
				If (ret == 40)
					Break
				EndIf
			Endif
			FlushJoyButton()
		ElseIf (wscmd.strID == "ID_VOICE")
			PlayVoice(scObj.voiceLog.get(0), true)
			FlushJoyButton()
		ElseIf (input.IsJoyButtonPushing(6) == true)
			Break
		ElseIf (isAutoMode() == true)
			If (this. msgFrame.isPending() == true)
			ElseIf (fPlayVoice == true)
				If (IsPlayVoice() == false)
					fLoop := 0
				EndIf
			Else
				If ((GetCurrentTime() - nowTime) > (500 + cnfObj.automodeSpeed * 1000))
					fLoop := 0
				EndIf
			EndIf
		ElseIf (fVoiceWait == true)
			If (fPlayVoice == true)
				If (IsPlayVoice() == false)
					fLoop := 0
				Endif
			EndIf
		EndIf
		If ((this.msgFrame.isShowBlink() == false) & (this.msgFrame.isPending() == false) & (isAutoMode() == false))
			this.msgFrame.showBlink()
		Endif
	EndWhile
	If ((ret != 30) & (ret !=20))
		this.msgFrame.hideBlink()
	EndIf
	If ((this.msgInfo.voice != "") &(cnfObj.voiceStopOnClick == true))
		StopVoice()
	EndIf
	this.msgInfo.clear()
	If (IsLoad() == false)
		scObj.hitretCount += 1
	EndIf
	Return ret
EndFunc

Function AdvScreen::update(Integer fFlush, Integer fWait)
	If (this.fUpdate == false)
		Return
	EndIf
	this.fUpdate := 0
	If (this.fUpdating == true)
		flushUpdate()
	EndIf
	If (this.transInfo.type == "NONE")
		fFlush := true
	ElseIf (cnfObj.screenEffect == 1)
		fFlush := true
	EndIf
	Integer activationWait := 500
	If ((this.fTransition == true) & (this.transInfo.time != 0))
		activationWait := this.transInfo.time
	EndIf
	Integer i := 0
	If (fFlush == false)
		this.sprTemp["transBase"] := Sprite
		this.sprTemp["dummyCg"] := Sprite
		copyAdvScreen(this.sprTemp["dummyCg"])
		this.sprTemp["dummyCg"].SetVisible(true)
	EndIf
	this.bustupMan.adjustPosition()
	screen.Lock()
	If (this.sprAdvBase.IsActivation())
		this.sprAdvBase.FlushActivation()
	EndIf
	If (this.fSetCg == true)
		this.sprAdvBase.DetachSprite(this.sprCg)
		If (this.sprCg.IsActivation())
			this.sprCg.FlushActivation()
		EndIf
		If (this.fSetCgRGB == false)
			loadCg(this.sprCg, this.cg.filename)
		Else
			CreateRGBImage(this.sprCg, this.colSetCgRGB, ScreenSize.w, ScreenSize.h)
		EndIf
		this.sprCg.SetEffectParameter(this.cg.effectParam)
		this.sprCg.MovePosition(-this.cg.pt.x, -this.cg.pt.y)
		this.sprCg.SetBackColor(0, 0)
		this.sprCg.SetVisible(true)
		this.sprAdvBase.AddSprite(60, this.sprCg)
		fWait := true
	EndIf
	If (this.fSetBustup == true)
		i := 0
		While (i < 5)
			Reference info := this.bustupMan.info[i]
			If (info.status != 2)
				this.sprBustupParent.DetachSprite(this.bustupMan.spr[i])
				this.bustupMan.spr[i].Release()
			EndIf
			i += 1
		EndWhile
		i := 0
		While (i < 5)
			If (this.bustupMan.spr[i].IsActivation() == true)
				this.bustupMan.spr[i].FlushActivation()
			EndIf
			If (this.bustupMan.info[i].status == 2)
			ElseIf ((this.bustupMan.info[i].status != 0) & (this.bustupMan.info[i].status != 8))
				loadBustup(this.bustupMan.spr[i], this.bustupMan.info[i])
				this.sprBustupParent.AddSprite(this.bustupMan.info[i].priority, this.bustupMan.spr[i])
				this.bustupMan.spr[i].SetVisible(true)
			EndIf
			this.bustupMan.adjustSprPosition(i)
			If ((this.bustupMan.info[i].status == 1) | (this.bustupMan.info[i].status == 4))
				this.bustupMan.info[i].status := 2
			ElseIf (this.bustupMan.info[i].status == 8)
				this.bustupMan.info[i].clear()
			EndIf
			i += 1
		EndWhile
	EndIf
	If (cnfObj.screenEffect == 1)
		endAnimation()
	EndIf
	If (this.reqToneFilter == true)
		this.sprAdvBase.AttachToneFilter(this.toneFilter[this.typeToneFilter])
		If (this.typeToneFilter == "NORMAL")
			this.fToneFilter := false
		Else
			this.fToneFilter := true
		EndIf
	EndIf
	this.reqToneFilter := false
	If (this.reqZoom == true)
		SpriteParam param
		this.sprAdvBase.GetParameter(param)
		If (this.zoomParam.isZoom() == false)
			param.ptDstPos := IPoint(0, 0)
			param.ptRevCenter := IPoint(0, 0)
			param.rHorzUnit := 1.0
			param.rVertUnit := 1.0
			this.fZoom := false
		Else
			param.ptDstPos := IPoint((-(this.zoomParam.pt.x - this.zoomParam.size.w / 2)) * this.zoomParam.horzUnit(), (-(this.zoomParam.pt.y - this.zoomParam.size.h / 2)) * this.zoomParam.vertUnit())
			param.rHorzUnit := this.zoomParam.horzUnit()
			param.rVertUnit := this.zoomParam.vertUnit()
			this.fZoom := true
		EndIf
		this.sprAdvBase.SetParameter(param)
		this.reqZoom := false
	EndIf
	if (this.fScroll == true)
		If (fFlush == true)
			this.sprCg.MovePosition(this.scrlParam.pt.x, this.scrlParam.pt.y)
		EndIf
		this.cg.pt := IPoint(-this.scrlParam.pt.x, -this.scrlParam.pt.y)
	EndIf
	If (fFlush == false)
		i := 0
		While (i < 5)
			Reference info := this.bustupMan.info[i]
			If (this.bustupMan.info[i].status == 16)
				SpriteParam param
				this.bustupMan.spr[i].GetParameter(param)
				Bezier2D bz
				bz.SetLinear(info.localPosition.x, info.localPosition.y, info.localPosition.x, info.localPosition.y + info.downParam.pt.y)
				info.localPosition := IPoint(info.localPosition.x, info.localPosition.y + info.downParam.pt.y)
				bz.SetAcceleration(info.downParam.accel, 0)
				this.bustupMan.spr[i].SetBezierCurve(bz)
			ElseIf(this.bustupMan.info[i].status == 128)
				SpriteParam param
				this.bustupMan.spr[i].GetParameter(param)
				Bezier2D bz
				bz.SetLinear(info.localPosition.x, info.localPosition.y, info.localPosition.x + info.leaveParam.pt.x, info.localPosition.y + info.leaveParam.pt.y)
				info.localPosition := IPoint(info.localPosition.x + info.leaveParam.pt.x, info.localPosition.y + info.leaveParam.pt.y)
				bz.SetAcceleration(info.leaveParam.accel, 0)
				this.bustupMan.spr[i].SetBezierCurve(bz)
				Sprite spr
				this.sprAdvBase.DetachSprite(this.bustupMan.spr[i])
				copyBustup(i, this.bustupMan.spr[i])
				this.sprBustupParent.DetachSprite(this.bustupMan.spr[i])
				screen.AddSprite(50940, this.bustupMan.spr[i])
				If (info.leaveParam.fFade != false)
					this.bustupMan.spr[i].SetBlendingEnvelope(256)
				EndIf
			EndIf
			i += 1
		EndWhile
	Else
		i := 0
		While (i < 5)
			Reference info := this.bustupMan.info[i]
			If (this.bustupMan.info[i].status == 16)
				info.localPosition := IPoint(info.localPosition.x, info.localPosition.y + info.downParam.pt.y)
				this.bustupMan.spr[i].MovePosition(info.localPosition.x, info.localPosition.y)
			ElseIf (this.bustupMan.info[i].status == 128)
				info.localPosition := IPoint(info.localPosition.x + info.leaveParam.pt.x, info.localPosition.y + info.leaveParam.pt.y)
				this.bustupMan.spr[i].MovePosition(info.localPosition.x, info.localPosition.y)
				If (info.leaveParam.fFade != false)
					this.bustupMan.spr[i].SetTransparency(256)
				Endif
			EndIf
			i += 1
		EndWhile
	EndIf
	If (fFlush == false)
		Integer type := 0
		If ((this.fTransition == true) & (this.transInfo.type != ""))
			this.sprAlpha.LoadImage(this.transInfo.type + ".eri")
			this.sprTemp["transBase"].SetAlphaImage(this.sprAlpha, 8)
			this.sprTemp["transBase"].SetBlendDegree(0)
			type := 1
		Else
			this.sprTemp["transBase"].CreateSprite(1, ScreenSize.w, ScreenSize.h)
			this.sprTemp["transBase"].SetTransparency(0)
		EndIf
		this.sprTemp["transBase"].SetBackColor(0, 0)
		this.sprTemp["transBase"].SetVisible(true)
		this.sprTemp["transBase"].AddSprite(10, this.sprTemp["dummyCg"])
		screen.AddSprite(50950, this.sprTemp["transBase"])
		If ((this.fScroll == true) & (fFlush == false))
			If (this.sprCg.IsActivation() == true)
				this.sprCg.FlushActivation()
			EndIf
			SpriteParam param
			this.sprCg.GetParameter(param)
			Bezier2D bz
			bz.SetLinear(param.ptDstPos.x, param.ptDstPos.y, this.scrlParam.pt.x, this.scrlParam.pt.y)
			bz.SetAcceleration(this.scrlParam.accel, 0)
			this.sprCg.SetBezierCurve(bz)
		EndIf
		screen.Unlock()
		this.sprTemp["transBase"].SetBlendingEnvelope(256)
		this.sprTemp["transBase"].BeginActivation(activationWait)
		If (this.fScroll == true)
			this.sprCg.BeginActivation(this.scrlParam.time)
		EndIf
		this.fUpdating := true
		If (fWait == true)
			WaitUntilSpriteActive(this.sprTemp["transBase"], true)
			flushUpdate()
		EndIf
	Else
		screen.Unlock()
	EndIf
	i := 0
	While (i < 5)
		If (this.bustupMan.info[i].status == 16)
			this.bustupMan.spr[i].BeginActivation(this.bustupMan.info[i].downParam.time)
			this.bustupMan.info[i].status := 2
		ElseIf (this.bustupMan.info[i].status == 128)
			this.bustupMan.spr[i].BeginActivation(this.bustupMan.info[i].leaveParam.time)
			this.bustupMan.info[i].clear()
		ElseIf (this.bustupMan.info[i].status == 32)
			If (fFlush == false)
				actionJump(this.bustupMan.info[i].id)
			EndIf
			this.bustupMan.info[i].status := 2
		ElseIf (this.bustupMan.info[i].status == 64)
			If (fFlush == false)
				actionShake(this.bustupMan.info[i].id)
			EndIf
			this.bustupMan.info[i].status := 2
		EndIf
		i += 1
	EndWhile
	If (IsEyeCatch() == true)
		EyeCatchLeave()
	EndIf
	this.fTransition := 0
	this.transInfo.clear()
	this.fSetCg := 0
	this.fSetBustup := 0
	this.fScroll := 0
EndFunc

Function AdvScreen::endAnimation()
	If (this.fCreate == 0)
		Return
	EndIf
	If (this.cg.effectParam.strType != "Nothing")
		EffectParam param
		param := this.cg.effectParam
		param.strType := "Nothing"
		this.sprCg.SetEffectParameter(param)
	EndIf
	Integer i := 0
	While (i < 5)
		If (this.bustupMan.info[i].status != 0)
			this.bustupMan.spr[i].BeginAnimation(true, 0)
			this.bustupMan.spr[i].EndAnimation()
		EndIf
		i += 1
	EndWhile
EndFunc

Function ChkSelect(Integer num)
	Return (adv.getSelectResult() == num)
EndFunc

Function Clear()
	If (IsLoad() == true)
		Return
	EndIf
	adv.clearMessage()
EndFunc

Function SetupAdvScreen()
	Debug("+-SetupAdvScreen-+")
	adv.create()
EndFunc

Function AddSelect(String str, Integer flag)
	adv.addSelect(str, flag)
EndFunc

Function BustupClear(Integer id)
	If (IsLoad() == true)
		Return
	EndIf
	adv.bustupClear(id)
EndFunc

Function BustupMove(Integer id, Integer pos)
	If (IsLoad() == -1)
        Return
    EndIf
	adv.bustupMove(id, pos)
EndFunc

Function BustupLeave(Integer id, Integer mx, Integer my, Integer fFade, Integer time, Integer accel)
	If (IsLoad() == true)
		Return
	EndIf
	adv.bustupLeave(id, mx, my, fFade, time, accel)
EndFunc

Function Talk(String str, String voice)
	adv.name(str, voice)
EndFunc

Function Tone(String type)
	If (IsLoad() == true)
		Return
	EndIf
	adv.setToneFilter(type)
EndFunc

Function DestroyAdvScreen()
	Debug("+-DestroyAdvScreen-+")
	adv.destroy()
EndFunc

Function Jump(Integer id)
	If (IsLoad() == true)
		Return
	EndIf
	adv.bustupJump(id)
EndFunc

Function Quake(Integer w, Integer h, Integer fWhole, Integer count, Integer time)
	If (IsLoad() == true)
		Return
	EndIf
	Integer fFlush := adv.isKeyUpdateFlush()
	If (fFlush == true)
		Return
	EndIf
	adv.effectQuake(w, h, fWhole, count, time)
EndFunc

Function Scroll(Integer x, Integer y, Integer time, Integer accel, Integer fWait)
	If (IsLoad() == true)
		Return
	EndIf
	adv.scroll(x, y, time, accel, fWait)
EndFunc

Function Sepia(Integer flag)
	If (IsLoad() == true)
		Return
	EndIf
	If (flag != 0)
		adv.setToneFilter("SEPIA")
	Else
		adv.setToneFilter("NORMAL")
	EndIf
EndFunc

Function Show(Integer fWait)
	If (IsLoad() == true)
		Return
	EndIf
	adv.showMessage(0, fWait)
EndFunc

Function StartSelect()
	Return adv.startSelect()
EndFunc

Function Update(Integer fFlush)
	If (IsLoad() == true)
		Return
	EndIf
	fFlush |= adv.isKeyUpdateFlush()
	adv.update(fFlush)
	adv.waitUpdate(fFlush)
EndFunc

Function WindowView(Integer type)
	adv.messageView(type)
EndFunc

Function WaitScroll()
	adv.waitScroll()
EndFunc

Function Zoom(Integer x, Integer y, Integer w, Integer h, Integer time, Integer accel, Integer fWait)
	If (IsLoad() == true)
		Return
	EndIf
	adv.zoom(x, y, w, h, time, accel, fWait)
EndFunc

Function Shake(Integer id)
	If (IsLoad() == true)
		Return
	EndIf
	adv.bustupShake(id)
EndFunc

Function SetCgRGB(Integer r, Integer g, Integer b)
	If (IsLoad() == true)
		Return
	EndIf
	adv.setCgRGB(r, g, b)
	adv.bustupClear(false)
EndFunc

Function SetCg(String str, Integer x, Integer y, Integer w, Integer h)
	If (IsLoad() == true)
		Return
	EndIf
	adv.setCg(str, x, y, w, h)
	adv.bustupClear(false)
	adv.zoom(400, 300, 800, 600)
EndFunc

Function SetBustup(String str, Integer pos, Integer priority)
	If (IsLoad() == true)
		Return
	EndIf
	adv.setBustup(str, pos, priority)
EndFunc

Function Transition(String type, Integer time)
	If (IsLoad() == true)
		Return
	EndIf
	adv.setTransition(type, time)
EndFunc

